module.exports = (function() {

  var pbserve=require('./pschema.js');
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { file: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          "message",
          { type: "literal", value: "message", description: "\"message\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(name, body) {return new pbserve.PMessage(name, false, body);},
          "extend",
          { type: "literal", value: "extend", description: "\"extend\"" },
          function(name, body) {return new pbserve.PMessage(name, true, body);},
          "extensions",
          { type: "literal", value: "extensions", description: "\"extensions\"" },
          "to",
          { type: "literal", value: "to", description: "\"to\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(from, to) {return {from:from, to:to};},
          "max",
          { type: "literal", value: "max", description: "\"max\"" },
          function(from) {return {from:from, to:(1<<29)-1};},
          "optional",
          { type: "literal", value: "optional", description: "\"optional\"" },
          function() {return "optional";},
          "required",
          { type: "literal", value: "required", description: "\"required\"" },
          function() {return "required";},
          "repeated",
          { type: "literal", value: "repeated", description: "\"repeated\"" },
          function() {return "repeated";},
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(c) {return c;},
          null,
          function(spec, type, name, id, option) {
                        var ret=new pbserve.PMember(spec);
                          ret.type=type;
                          ret.name=name;
                          ret.id=id;
                          if (option)
                            ret.addOption(option.name, option.value);
                          return ret;
                        },
          "group",
          { type: "literal", value: "group", description: "\"group\"" },
          function(spec, name, id, group, option) {
                        var ret=new pbserve.PMember(spec);
                         ret.type="group";
                         ret.name=name;
                         ret.id=id;
                         ret.group=new pbserve.PMessage("", false, group);
                         if (option)
                           ret.addOption(option.name, option.value);
                          return ret;
                       },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(name, value) {return {name:name, value:value};},
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() {return true;},
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() {return false;},
          function(s) {return s;},
          function(i) {return i;},
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(digits) { return parseInt(digits.join(""), 10); },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          /^[\S\s]/,
          { type: "class", value: "[^]", description: "[^]" },
          function(a, b) {return a+b;},
          /^[^\\"]/,
          { type: "class", value: "[^\\\\\"]", description: "[^\\\\\"]" },
          function(s) {return eval('"'+s.join("")+'"');},
          /^[a-zA-Z_]/,
          { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
          /^[a-zA-Z_0-9]/,
          { type: "class", value: "[a-zA-Z_0-9]", description: "[a-zA-Z_0-9]" },
          function(a, b) {return a+b.join("");},
          function(n) {return n;},
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(n) {return "."+n;},
          function(a) {return a+".";},
          function(a, b) {return a.join("")+b;},
          "enum",
          { type: "literal", value: "enum", description: "\"enum\"" },
          function(name, body) {return new pbserve.PEnum(body);},
          "service",
          { type: "literal", value: "service", description: "\"service\"" },
          function(name, body) {return new pbserve.PService(name, body);},
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(name1, name2) {
            var ret=[name1];
            for (var i=0; i<name2.length; i++)
              ret.push(name2[i][2]);
            return ret;
          },
          "rpc",
          { type: "literal", value: "rpc", description: "\"rpc\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "returns",
          { type: "literal", value: "returns", description: "\"returns\"" },
          function(name, argumentTypes, returnType) {
            var ret=new pbserve.PMethod();
            ret.name=name;
            ret.argumentTypes=argumentTypes?argumentTypes:[];
            ret.returnType=returnType;
            return ret;
          },
          "package",
          { type: "literal", value: "package", description: "\"package\"" },
          function(name) {return name;},
          "option",
          { type: "literal", value: "option", description: "\"option\"" },
          function(name) { return {name:name, value:value}; },
          "import",
          { type: "literal", value: "import", description: "\"import\"" },
          function(file) {return file;},
          /^[ \t\n]/,
          { type: "class", value: "[ \\t\\n]", description: "[ \\t\\n]" },
          function(element) {pbserve.PName.addElement(element);},
          function(importline) {pbserve.PSchema.addImport(importline);},
          function(package) {pbserve.PSchema.setNamespace(package);},
          function(option) {pbserve.PSchema.addOption(option.name, option.value);},
          /^[\t\x0B\f \xA0\uFEFF]/,
          { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          void 0,
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          { type: "any", description: "any character" },
          /^[\n\r]/,
          { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" }
        ],

        peg$bytecode = [
          peg$decode("!7;+5$ !7:,#&7:\"+#%'\"%$\"#  \"#  "),
          peg$decode("!.\"\"\"2\"3#+\x97$7;+\x8D%7,+\x83%7;+y%.$\"\"2$3%+i%7;+_% !7#,#&7#\"+M%7;+C%.&\"\"2&3'+3%7;+)%4*6(*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.)\"\"2)3*+\x97$7;+\x8D%7,+\x83%7;+y%.$\"\"2$3%+i%7;+_% !7#,#&7#\"+M%7;+C%.&\"\"2&3'+3%7;+)%4*6+*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("72*) \"7'*# \"7$"),
          peg$decode("!.,\"\"2,3-+\x8F$7;+\x85%7*+{%7;+q%..\"\"2.3/+a%7;+W%7*+M%7;+C%.0\"\"2031+3%7;+)%4*62*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\xA5 \"!.,\"\"2,3-+\x94$7;+\x8A%7*+\x80%7;+v%..\"\"2.3/+f%7;+\\%.3\"\"2334+L%7;+B%.0\"\"2031+2%7;+(%4*65*!'%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.6\"\"2637+1$7;+'%4\"68\" %$\"#  \"#  *g \"!.9\"\"293:+1$7;+'%4\"6;\" %$\"#  \"#  *B \"!.<\"\"2<3=+1$7;+'%4\"6>\" %$\"#  \"#  "),
          peg$decode("!.?\"\"2?3@+F$7;+<%7*+2%7;+(%4$6A$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("!7%*# \" B+\xAC$7;+\xA2%7-+\x98%7;+\x8E%7,+\x84%7;+z%7&*# \" B+j%7;+`%7(*# \" B+P%7;+F%.0\"\"2031+6%7;+,%4,6C,%+)'%#%$,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\u010D \"!7%*# \" B+\xFC$7;+\xF2%.D\"\"2D3E+\xE2%7;+\xD8%7,+\xCE%7;+\xC4%7&+\xBA%7;+\xB0%.$\"\"2$3%+\xA0%7;+\x96% !7#,#&7#\"+\x84%7;+z%.&\"\"2&3'+j%7;+`%7(*# \" B+P%7;+F%.0\"\"2031+6%7;+,%426F2%1-+'#%$2#  $1#  $0#  $/#  $.#  $-#  $,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.G\"\"2G3H+\x8F$7;+\x85%7-+{%7;+q%.?\"\"2?3@+a%7;+W%7)+M%7;+C%.I\"\"2I3J+3%7;+)%4*6K*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.L\"\"2L3M+1$7;+'%4\"6N\" %$\"#  \"#  *\x86 \"!.O\"\"2O3P+1$7;+'%4\"6Q\" %$\"#  \"#  *a \"!7*+' 4!6A!! %*O \"!7++' 4!6R!! %*= \"!7,+2$7;+(%4\"6S\"!!%$\"#  \"#  "),
          peg$decode("! !0T\"\"1!3U+,$,)&0T\"\"1!3U\"\"\"  +2$7;+(%4\"6V\"!!%$\"#  \"#  "),
          peg$decode("!.W\"\"2W3X+\xBA$ !!.Y\"\"2Y3Z+9$0[\"\"1!3\\+)%4\"6]\"\"! %$\"#  \"#  *) \"0^\"\"1!3_,V&!.Y\"\"2Y3Z+9$0[\"\"1!3\\+)%4\"6]\"\"! %$\"#  \"#  *) \"0^\"\"1!3_\"+B%.W\"\"2W3X+2%7;+(%4$6`$!\"%$$#  $##  $\"#  \"#  "),
          peg$decode("!0a\"\"1!3b+G$ !0c\"\"1!3d,)&0c\"\"1!3d\"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode("!7/+' 4!6f!! %*C \"!.g\"\"2g3h+2$7/+(%4\"6i\"! %$\"#  \"#  "),
          peg$decode("!7,+8$.g\"\"2g3h+(%4\"6j\"!!%$\"#  \"#  "),
          peg$decode("! !7.,#&7.\"+=$7,+3%7;+)%4#6k#\"\"!%$##  $\"#  \"#  "),
          peg$decode("!.l\"\"2l3m+\x97$7;+\x8D%7,+\x83%7;+y%.$\"\"2$3%+i%7;+_% !71,#&71\"+M%7;+C%.&\"\"2&3'+3%7;+)%4*6n*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7,+{$7;+q%.?\"\"2?3@+a%7;+W%7*+M%7;+C%.0\"\"2031+3%7;+)%4(6K(\"'#%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7!*/ \"7\"*) \"70*# \"73"),
          peg$decode("!.o\"\"2o3p+\x97$7;+\x8D%7,+\x83%7;+y%.$\"\"2$3%+i%7;+_% !75,#&75\"+M%7;+C%.&\"\"2&3'+3%7;+)%4*6q*\"'#%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7-+\xA3$7;+\x99% !!.r\"\"2r3s+A$7;+7%7-+-%7;+#%'$%$$#  $##  $\"#  \"#  ,R&!.r\"\"2r3s+A$7;+7%7-+-%7;+#%'$%$$#  $##  $\"#  \"#  \"+)%4#6t#\"\" %$##  $\"#  \"#  "),
          peg$decode("!.u\"\"2u3v+\u0112$7;+\u0108%7,+\xFE%7;+\xF4%.w\"\"2w3x+\xE4%7;+\xDA%74*# \" B+\xCA%7;+\xC0%.y\"\"2y3z+\xB0%7;+\xA6%.{\"\"2{3|+\x96%7;+\x8C%.w\"\"2w3x+|%7;+r%7-+h%7;+^%.y\"\"2y3z+N%7;+D%.0\"\"2031+4%7;+*%446}4#1-%%$4#  $3#  $2#  $1#  $0#  $/#  $.#  $-#  $,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.~\"\"2~3+`$7;+V%7-+L%7;+B%.0\"\"2031+2%7;+(%4&6\x80&!#%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.\x81\"\"2\x813\x82+\x84$7;+z%7-+p%7;+f%.?\"\"2?3@+V%7;+L%7)+B%.0\"\"2031+2%7;+(%4)6\x83)!&%$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.\x84\"\"2\x843\x85+`$7;+V%7++L%7;+B%.0\"\"2031+2%7;+(%4&6\x86&!#%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("0\x87\"\"1!3\x88"),
          peg$decode("!72+' 4!6\x89!! %*S \"!78+' 4!6\x8A!! %*A \"!76+' 4!6\x8B!! %*/ \"!77+' 4!6\x8C!! %"),
          peg$decode(" !7<*/ \"7@*) \"7=*# \"7>,5&7<*/ \"7@*) \"7=*# \"7>\""),
          peg$decode("0\x8D\"\"1!3\x8E"),
          peg$decode("!.\x8F\"\"2\x8F3\x90+\x97$ !!!8.\x92\"\"2\x923\x939*$$\"\" \x91\"#  +-$7?+#%'\"%$\"#  \"#  ,L&!!8.\x92\"\"2\x923\x939*$$\"\" \x91\"#  +-$7?+#%'\"%$\"#  \"#  \"+3%.\x92\"\"2\x923\x93+#%'#%$##  $\"#  \"#  "),
          peg$decode("!.\x94\"\"2\x943\x95+{$ !!!87@9*$$\"\" \x91\"#  +-$7?+#%'\"%$\"#  \"#  ,F&!!87@9*$$\"\" \x91\"#  +-$7?+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  "),
          peg$decode("-\"\"1!3\x96"),
          peg$decode("0\x97\"\"1!3\x98")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
